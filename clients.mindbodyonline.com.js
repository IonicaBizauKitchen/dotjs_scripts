// Generated by CoffeeScript 1.3.3
(function() {
  var Mindbody, Teacher, Yoga, course, courses, _i, _len,
    _this = this;

  window.log = function() {
    if (window.console) {
      return console.log.apply(console, arguments);
    }
  };

  Mindbody = (function() {

    function Mindbody() {}

    Mindbody.baseUrl = "https://clients.mindbodyonline.com/Ajax/";

    Mindbody.trainerUrl = function(id) {
      return "" + this.baseUrl + "QuickStaffBio/?trnid=" + id;
    };

    Mindbody.classUrl = function(id) {
      return "" + this.baseUrl + "ClassInfo/?classid=" + id;
    };

    Mindbody.locationUrl = function(id) {
      return "" + this.baseUrl + "LocationInfo/?locid=" + id;
    };

    Mindbody.scrapeCourses = function() {
      var courses, day, field, fields, headers, _i, _len;
      courses = [];
      fields = ['startTime', 'className', 'trainerName', 'duration', 'locationName'];
      headers = {};
      day = null;
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        headers[field] = $("#" + field + "Header").index();
      }
      $("#classSchedule-mainTable tr").each(function() {
        var course, id, index, name;
        if ($(this).find("td.header").length > 0) {
          day = $(this).find("td.header").text().trim();
        }
        course = {};
        course.day = day;
        course.location = document.title.replace(" Online", "");
        if (location.href.match(/studioid=([-+]\d+)/) != null) {
          course.locationId = location.href.match(/studioid=([-+]\d+)/)[1];
        }
        for (name in headers) {
          index = headers[name];
          if (!(index !== -1)) {
            continue;
          }
          course[name] = $(this).find("td:eq(" + index + ")").text().trim();
          switch (name) {
            case 'className':
              id = $(this).find("td:eq(" + index + ") a").attr('name');
              if (id != null) {
                course.classId = id.replace("cid", "");
              }
              break;
            case 'trainerName':
              id = $(this).find("td:eq(" + index + ") a").attr('name');
              if (id != null) {
                course.trainerId = id.replace("bio", "");
              }
              break;
            case 'locationName':
              if (course.locationName != null) {
                course.location += ": " + course.locationName;
                delete course.locationName;
              }
          }
        }
        return courses.push(course);
      });
      return courses;
    };

    return Mindbody;

  })();

  Yoga = (function() {

    function Yoga() {}

    Yoga.baseUrl = "http://localhost:5000/";

    Yoga.createTeacherUrl = "" + Yoga.baseUrl + "teachers";

    Yoga.createSchedulingUrl = "" + Yoga.baseUrl + "schedulings";

    return Yoga;

  })();

  Teacher = (function() {

    function Teacher() {}

    Teacher.prototype.body = function() {
      return {
        first_name: this.first_name,
        last_name: this.last_name,
        avatar_url: this.avatar_url,
        bio: this.bio,
        mindbody_id: this.mindbody_id
      };
    };

    Teacher.prototype.save = function() {
      return $.post(Yoga.createTeacherUrl, {
        teacher: this.body()
      }, function(response) {});
    };

    Teacher.createFromCourseData = function(course) {
      return $.get(Mindbody.trainerUrl(course.trainerId), function(response) {
        var $data, teacher;
        $data = $(response);
        teacher = new Teacher;
        teacher.first_name = $data.find('h2').text().split(" ")[0];
        teacher.last_name = $data.find('h2').text().split(" ")[1];
        teacher.avatar_url = $data.find('img').attr('src');
        teacher.bio = $data.find('div.userHTML').html();
        if (teacher.avatar_url && (teacher.avatar_url.match(/staff\/(\d+)/) != null)) {
          teacher.mindbody_id = teacher.avatar_url.match(/staff\/(\d+)/)[1];
        }
        return teacher.save();
      });
    };

    Teacher.scheduleCourse = function(course) {
      return $.post(Yoga.createSchedulingUrl, {
        course: course
      }, function(response) {
        return log("nothing yet");
      });
    };

    return Teacher;

  })();

  Mindbody = Mindbody;

  Yoga = Yoga;

  Teacher = Teacher;

  courses = Mindbody.scrapeCourses();

  setTimeout((function() {}), 3000);

  for (_i = 0, _len = courses.length; _i < _len; _i++) {
    course = courses[_i];
    if (course.trainerId != null) {
      Teacher.scheduleCourse(course);
    }
  }

}).call(this);
